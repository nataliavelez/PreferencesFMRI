#!/bin/bash
# SMOOTHING_POSTFMRIPREP.SBATCH
# Smooths files generated by fmriprep using FSL SUSAN
# Usage: sbatch smoothing_postfmriprep.sh [PROJECT] sub-[SUBJECT_NO]

#################
#set a job name  
#SBATCH --job-name=smoothing
#################  
#a file for job output, you can check job progress, append the job ID with %j to make it unique
#SBATCH --output=sbatch_reports/smoothing.%j.out
#################
# a file for errors from the job
#SBATCH --error=sbatch_reports/smoothing.%j.err
#################
#time you think you need; default is 2 hours
#format could be dd-hh:mm:ss, hh:mm:ss, mm:ss, or mm
#SBATCH --time=0:45:00
#################
# Quality of Service (QOS); think of it as sending your job into a special queue; --qos=long for with a max job length of 7 days.
#SBATCH -p normal
#################
#number of nodes you are requesting, the more you ask for the longer you wait
#SBATCH --nodes=1
#################
# --mem is memory per node; default is 4000 MB per CPU, remember to ask for enough mem to match your CPU request, since 
# sherlock automatically allocates 4 Gigs of RAM/CPU, if you ask for 8 CPUs you will get 32 Gigs of RAM, so either 
# leave --mem commented out or request >= to the RAM needed for your CPU request.  It will also accept mem. in units, ie "--mem=4G"
#SBATCH --mem=8000
# to request multiple threads/CPUs use the -c option, on Sherlock we use 1 thread/CPU, 16 CPUs on each normal compute node 4Gigs RAM per CPU.  Here we will request just 1.
#SBATCH -c 1
#################
# Have SLURM send you an email when the job ends or fails, careful, the email could end up in your clutter folder
# Also, if you submit hundreds of jobs at once you will get hundreds of emails.
#SBATCH --mail-type=END,FAIL # notifications for job done & fail
# Remember to change this to your email
##SBATCH --mail-user=YourSUNetID@stanford.edu

module load biology fsl

# Smoothing kernel size
FWHM=4.0
KERNEL=`echo "$FWHM/2.3548" | bc -l`

# List directories
PROJECT_DIR=$SCRATCH/$1/BIDS_data
IN_DIR=$PROJECT_DIR/derivatives/fmriprep
OUT_DIR=$PROJECT_DIR/derivatives/smooth_fmriprep
SUBJ_DIR=$OUT_DIR/$2
FUNC_DIR=$SUBJ_DIR/func

printf "INPUT: %s\n" "$PROJECT_DIR"
printf "OUTPUT: %s\n" "$OUT_DIR"

# Create directories, if they don't already exist
if [ ! -d "$OUT_DIR" ]; then
	mkdir -p "$OUTDIR"
fi

if [ ! -d "$SUBJ_DIR" ]; then
	mkdir -p "$SUBJ_DIR"
	mkdir -p "$FUNC_DIR"
fi

# Get all functional files
IN_FILES=`find $IN_DIR/$2/func/*preproc.nii.gz`

for IN_FILE in $IN_FILES; do
	# Copy original functional file to new directory
	BASE_FILE=`basename $IN_FILE`
	FUNC=$FUNC_DIR/$BASE_FILE
	cp $IN_FILE $FUNC
	echo "=== Processing: $BASE_FILE ==="

	# Copy mask to new directory
	IN_MASK=${IN_FILE/preproc/brainmask}
	BASE_MASK=`basename $IN_MASK`
	MASK=$FUNC_DIR/$BASE_MASK
	cp $IN_MASK $MASK

	# Get filenames for intermediate outputs
	MASKED_FUNC=${FUNC/preproc/masked}
	MEAN_FUNC=${FUNC/preproc/mean}
	THRESH_FUNC=${FUNC/preproc/thresh}
	DIL_MASK=${MASK/_brainmask/_dilmask}
	SMOOTH_FUNC=${FUNC/_preproc/_variant-smoothed_preproc}
	
	# Mask functional file
	fslmaths $IN_FILE -mas $MASK $MASKED_FUNC

	# Get 2nd and 98th percentile image intensities
	# Threshold is set as 10% of the robust range
	IMG_HI=`fslstats $MASKED_FUNC -p 98`
	IMG_LO=`fslstats $MASKED_FUNC -p 2`
	IMG_RANGE=`echo "$IMG_HI - $IMG_LO" | bc -l `
	IMG_THRESH=`echo "$IMG_RANGE * .1" | bc -l `

	# Threshold masked functional
	fslmaths $MASKED_FUNC -thr $IMG_THRESH -Tmin -bin $MASK -odt char

	# Calculate brightness threshold from original functional
	IMG_MEDIAN=`fslstats $IN_FILE -k $MASK -p 50`
	BT=`echo "$IMG_MEDIAN * .75" | bc -l`
	echo "Median brightness: $IMG_MEDIAN"
	echo "Brightness threshold: $BT"

	# Dilate mask
	fslmaths $MASK -dilF $DIL_MASK
	
	# Get mean functional image
	fslmaths $IN_FILE -mas $DIL_MASK $THRESH_FUNC
	fslmaths $THRESH_FUNC -Tmean $MEAN_FUNC

	#Echo function call
	echo "susan $THRESH_FUNC $BT $KERNEL 3 1 1 $MEAN_FUNC $BT $SMOOTH_FUNC"
	
	# Run smoothing	
	susan $THRESH_FUNC $BT $KERNEL 3 1 1 $MEAN_FUNC $BT $SMOOTH_FUNC

	# Clean up intermediate images
	rm -f $FUNC
	rm -f *usan_size.nii.gz
	
done
